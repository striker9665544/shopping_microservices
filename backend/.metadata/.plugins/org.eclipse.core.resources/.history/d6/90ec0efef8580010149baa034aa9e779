package com.search.demo.controller;

//src/main/java/com/search/demo/controller/SearchController.java
 
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;

import com.search.demo.dto.*;

@RestController
@RequestMapping("/search")
public class SearchController {

 // Spring will provide this bean for us to use
 private final WebClient.Builder webClientBuilder;

 public SearchController(WebClient.Builder webClientBuilder) {
     this.webClientBuilder = webClientBuilder;
 }

 @GetMapping
 public Flux<ProductDTO> searchAllProducts(@RequestParam("q") String query) {
     // Create a single WebClient instance to be reused
     WebClient webClient = webClientBuilder.build();

     // Asynchronously call the mobile service
     Flux<ProductDTO> mobileResults = webClient.get()
             .uri("http://mobile-service:8082/mobile/search?q={query}", query)
             .retrieve()
             .bodyToFlux(ProductDTO.class)
             .doOnNext(p -> p.setCategory("Mobiles")) // Add category to the result
             .onErrorResume(e -> { // If a service fails, log it and continue with empty results
                 System.err.println("Error calling mobile-service: " + e.getMessage());
                 return Flux.empty();
             });

     // Asynchronously call the laptop service
     Flux<ProductDTO> laptopResults = webClient.get()
             .uri("http://laptop-service:8083/laptop/search?q={query}", query)
             .retrieve()
             .bodyToFlux(ProductDTO.class)
             .doOnNext(p -> p.setCategory("Laptops"))
             .onErrorResume(e -> {
                 System.err.println("Error calling laptop-service: " + e.getMessage());
                 return Flux.empty();
             });

     // Asynchronously call the shoes service
     Flux<ProductDTO> shoeResults = webClient.get()
             .uri("http://shoes-service:8084/shoes/search?q={query}", query)
             .retrieve()
             .bodyToFlux(ProductDTO.class)
             .doOnNext(p -> p.setCategory("Shoes"))
             .onErrorResume(e -> {
                 System.err.println("Error calling shoes-service: " + e.getMessage());
                 return Flux.empty();
             });

     // Merge the results from all calls into a single, continuous stream.
     // The calls happen in parallel, and results are emitted as they arrive.
     return Flux.merge(mobileResults, laptopResults, shoeResults);
 }
}