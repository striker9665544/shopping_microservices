package com.search.demo.controller;

//src/main/java/com/search/demo/controller/SearchController.java
//src/main/java/com/example/searchservice/controller/SearchController.java

import com.search.demo.dto.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;

@RestController
@RequestMapping("/search")
public class SearchController {
	
	 private final WebClient.Builder webClientBuilder;
	
	 public SearchController(WebClient.Builder webClientBuilder) {
	     this.webClientBuilder = webClientBuilder;
	 }
	
	 @GetMapping
	 public Flux<ProductDTO> searchAllProducts(@RequestParam(value = "q", required = false, defaultValue = "") String query) {
	     WebClient webClient = webClientBuilder.build();
	
	     // Call mobile service
	     Flux<ProductDTO> mobileResults = webClient.get()
	             .uri("http://localhost:8082/mobile/search?q={query}", query) // CORRECTED: Using localhost for testing
	             .retrieve()
	             .bodyToFlux(ProductDTO.class)
	             .doOnNext(p -> p.setCategory("Mobiles")) // Sets the correct category
	             .onErrorResume(e -> {
	                 System.err.println("Error calling mobile-service: " + e.getMessage());
	                 return Flux.empty();
	             });
	
	     // Call laptop service
	     Flux<ProductDTO> laptopResults = webClient.get()
	             .uri("http://localhost:8083/laptop/search?q={query}", query) // CORRECTED: Using localhost for testing
	             .retrieve()
	             .bodyToFlux(ProductDTO.class)
	             .doOnNext(p -> p.setCategory("Laptops")) // Sets the correct category
	             .onErrorResume(e -> {
	                 System.err.println("Error calling laptop-service: " + e.getMessage());
	                 return Flux.empty();
	             });
	
	     // Call shoes service
	     Flux<ProductDTO> shoeResults = webClient.get()
	             .uri("http://localhost:8084/shoes/search?q={query}", query) // CORRECTED: Using localhost for testing
	             .retrieve()
	             .bodyToFlux(ProductDTO.class)
	             .doOnNext(p -> p.setCategory("Shoes")) // Sets the correct category
	             .onErrorResume(e -> {
	                 System.err.println("Error calling shoes-service: " + e.getMessage());
	                 return Flux.empty();
	             });
	
	     return Flux.merge(mobileResults, laptopResults, shoeResults);
	 }
}