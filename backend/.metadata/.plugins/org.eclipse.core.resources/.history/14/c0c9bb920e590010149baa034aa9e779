// src/main/java/com/mobile/demo/Controller/MobileController.java
package com.mobile.demo.Controller;

import com.mobile.demo.Entity.Mobile;
import com.mobile.demo.Repository.MobileRepository;
import com.mobile.demo.dto.ProductResponseDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/mobile")
public class MobileController {
    
    @Autowired
    private MobileRepository mobileRepository;

    // This method converts a Mobile entity to a DTO
    private ProductResponseDTO convertToDto(Mobile mobile) {
        ProductResponseDTO dto = new ProductResponseDTO();
        dto.setId(mobile.getId());
        dto.setName(mobile.getName());
        dto.setPrice(mobile.getPrice());
        dto.setBrand(mobile.getBrand());
        return dto;
    }

    @GetMapping
    public List<ProductResponseDTO> getAllMobile(@RequestParam(required = false) String brand) {
        List<Mobile> mobiles;
        if (brand != null && !brand.isEmpty()) {
            mobiles = mobileRepository.findByBrand(brand);
        } else {
            mobiles = mobileRepository.findAll();
        }
        // Convert the list of entities to a list of DTOs
        return mobiles.stream().map(this::convertToDto).collect(Collectors.toList());
    }
    
    @GetMapping("/search")
    public List<ProductResponseDTO> searchMobiles(@RequestParam(value = "q", defaultValue = "") String query) {
        System.out.println("--- MOBILE-SERVICE: Received /search request with query: '" + query + "' ---");
        
        List<Mobile> mobiles;
        if (query.isEmpty()) {
            System.out.println("MOBILE-SERVICE: Query is empty, finding all mobiles.");
            mobiles = mobileRepository.findAll();
        } else {
            // Add wildcards to the query string here
            String searchQuery = "%" + query + "%"; 
            System.out.println("MOBILE-SERVICE: Query is '" + query + "', searching with pattern: '" + searchQuery + "'");
            mobiles = mobileRepository.searchByName(searchQuery);
        }
        
        System.out.println("MOBILE-SERVICE: Found " + mobiles.size() + " products in database.");
        
        mobiles.forEach(m -> System.out.println("MOBILE-SERVICE: Mapping product -> " + m.getName()));

        return mobiles.stream().map(this::convertToDto).collect(Collectors.toList());
    }
}